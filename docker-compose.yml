version: "3.7"

networks:
  app-net:

services:
  app-php:
    build:
      context: ./containers/app
    container_name: ${COMPOSE_PROJECT_NAME}.app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./${PROJECT_DIR}:/var/www
    networks:
      - app-net

  app-data:
    image: mysql:8.0
    container_name: ${COMPOSE_PROJECT_NAME}.data
    restart: unless-stopped
    volumes:
      - ./containers/app-data/init:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql
    ports:
      - ${MYSQL_PORT}:3306
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    networks:
      - app-net

  nginx:
    build:
      context: ./containers/nginx
    container_name: ${COMPOSE_PROJECT_NAME}.nginx
    restart: unless-stopped
    ports:
      - ${HTTP_PORT}:80
    volumes:
      - ./${PROJECT_DIR}:/var/www
    networks:
      - app-net

  redis:
    image: redis:alpine
    container_name: ${COMPOSE_PROJECT_NAME}.redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    networks:
      - app-net

  mailhog:
    image: mailhog/mailhog:latest
    container_name: ${COMPOSE_PROJECT_NAME}.mail
    restart: unless-stopped
    ports:
      - ${MAILHOG_PORT}:8025
    networks:
      - app-net

  meilisearch:
    image: getmeili/meilisearch:v1.12
    container_name: ${COMPOSE_PROJECT_NAME}.search
    restart: unless-stopped
    ports:
      - ${MEILISEARCH_PORT}:7700
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_KEY}
      MEILI_NO_ANALYTICS: 1
    networks:
      - app-net

  artisan:
    image: ${COMPOSE_PROJECT_NAME}-app
    container_name: ${COMPOSE_PROJECT_NAME}.artisan
    volumes:
      - ./${PROJECT_DIR}:/var/www:delegated
    depends_on:
      - app
    working_dir: /var/www
    entrypoint: [ 'php', '/var/www/artisan' ]
    networks:
      - app-net

  npm:
    image: ${COMPOSE_PROJECT_NAME}-app
    container_name: ${COMPOSE_PROJECT_NAME}.npm
    volumes:
      - ./${PROJECT_DIR}:/var/www:delegated
    depends_on:
      - app
    working_dir: /var/www
    entrypoint: [ 'npm' ]
    networks:
      - app-net

  composer:
    image: ${COMPOSE_PROJECT_NAME}-app
    container_name: ${COMPOSE_PROJECT_NAME}.composer
    volumes:
      - ./${PROJECT_DIR}:/var/www:delegated
    depends_on:
      - app
    working_dir: /var/www
    entrypoint: [ 'composer' ]
    networks:
      - app-net

  build:
    image: ${COMPOSE_PROJECT_NAME}-app
    container_name: ${COMPOSE_PROJECT_NAME}.build
    volumes:
      - ./:/var/www:delegated
    depends_on:
      - app
    working_dir: /var/www/${PROJECT_DIR}
    entrypoint: [ 'php', '/var/www/${PROJECT_DIR}/artisan', 'build' ]
    networks:
      - app-net

  selenium:
    image: selenium/standalone-chrome
    container_name: ${COMPOSE_PROJECT_NAME}.selenium
    restart: unless-stopped
    ports:
      - ${SELENIUM_PORT}:4444
    networks:
      - app-net

  cypress:
    image: "cypress/included:12.9.0"
    container_name: ${COMPOSE_PROJECT_NAME}.cypress
    depends_on:
      - nginx
    environment:
      - CYPRESS_baseUrl=http://${COMPOSE_PROJECT_NAME}.nginx
    working_dir: /e2e
    volumes:
      - ./${PROJECT_DIR}:/e2e
    networks:
      - app-net

  infection:
    image: ${COMPOSE_PROJECT_NAME}-app
    container_name: ${COMPOSE_PROJECT_NAME}.infection
    volumes:
      - ./${PROJECT_DIR}:/var/www:delegated
    depends_on:
      - app
    working_dir: /var/www
    entrypoint: [ 'infection' ]
    networks:
      - app-net

  localstack:
    image: localstack/localstack:latest
    ports:
      - 4567:4566
    environment:
      - SERVICES=s3:4566
      - HOSTNAME=localstack
      - HOSTNAME_EXTERNAL=localstack
      - DEFAULT_REGION=us-east-2

  aws-cli:
    image: amazon/aws-cli
    depends_on:
      - localstack
    volumes:
        - ./testbucket:/aws
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-2
    entrypoint: /bin/sh -c
    command: >
      "
        aws --endpoint-url=http://localstack:4566 s3api create-bucket --bucket my-bucket --region us-east-1
        aws --endpoint-url=http://localstack:4566 s3 cp testData.csv s3://cbk-data-bucket//testData.csv
        aws --endpoint-url=http://localstack:4566 s3 cp testDataOne.csv s3://cbk-data-bucket//testDataTwo.csv
        aws --endpoint-url=http://localstack:4566 s3 cp testDataTwo.csv s3://cbk-data-bucket//testDataTwo.csv
        aws --endpoint-url=http://localstack:4566 s3 cp testDataThree.csv s3://cbk-data-bucket//testDataThree.csv
      "


volumes:
    mysql-data:
    redis-data: